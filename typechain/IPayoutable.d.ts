/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IPayoutableInterface extends ethers.utils.Interface {
  functions: {
    "authorizePayoutOperator(address)": FunctionFragment;
    "cancelPayout(string)": FunctionFragment;
    "executePayout(string)": FunctionFragment;
    "isPayoutOperatorFor(address,address)": FunctionFragment;
    "orderPayout(string,uint256,string)": FunctionFragment;
    "orderPayoutFrom(string,address,uint256,string)": FunctionFragment;
    "processPayout(string)": FunctionFragment;
    "putFundsInSuspenseInPayout(string)": FunctionFragment;
    "rejectPayout(string,string)": FunctionFragment;
    "retrievePayoutData(string)": FunctionFragment;
    "revokePayoutOperator(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "authorizePayoutOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPayout",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "executePayout",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPayoutOperatorFor",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "orderPayout",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "orderPayoutFrom",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "processPayout",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "putFundsInSuspenseInPayout",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectPayout",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "retrievePayoutData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePayoutOperator",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizePayoutOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executePayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPayoutOperatorFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderPayoutFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "putFundsInSuspenseInPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrievePayoutData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePayoutOperator",
    data: BytesLike
  ): Result;

  events: {
    "AuthorizedPayoutOperator(address,address)": EventFragment;
    "PayoutCancelled(address,string)": EventFragment;
    "PayoutExecuted(address,string)": EventFragment;
    "PayoutFundsInSuspense(address,string)": EventFragment;
    "PayoutInProcess(address,string)": EventFragment;
    "PayoutOrdered(address,string,address,uint256,string)": EventFragment;
    "PayoutRejected(address,string,string)": EventFragment;
    "RevokedPayoutOperator(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorizedPayoutOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayoutCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayoutExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayoutFundsInSuspense"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayoutInProcess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayoutOrdered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayoutRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokedPayoutOperator"): EventFragment;
}

export class IPayoutable extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IPayoutableInterface;

  functions: {
    authorizePayoutOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cancelPayout(
      operationId: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executePayout(
      operationId: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isPayoutOperatorFor(
      operator: string,
      from: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    orderPayout(
      operationId: string,
      value: BigNumberish,
      instructions: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    orderPayoutFrom(
      operationId: string,
      walletToBePaidOut: string,
      value: BigNumberish,
      instructions: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    processPayout(
      operationId: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    putFundsInSuspenseInPayout(
      operationId: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rejectPayout(
      operationId: string,
      reason: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    retrievePayoutData(
      operationId: string,
      overrides?: CallOverrides
    ): Promise<{
      walletToDebit: string;
      value: BigNumber;
      instructions: string;
      status: number;
      0: string;
      1: BigNumber;
      2: string;
      3: number;
    }>;

    revokePayoutOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  authorizePayoutOperator(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cancelPayout(
    operationId: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executePayout(
    operationId: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isPayoutOperatorFor(
    operator: string,
    from: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  orderPayout(
    operationId: string,
    value: BigNumberish,
    instructions: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  orderPayoutFrom(
    operationId: string,
    walletToBePaidOut: string,
    value: BigNumberish,
    instructions: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  processPayout(
    operationId: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  putFundsInSuspenseInPayout(
    operationId: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rejectPayout(
    operationId: string,
    reason: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  retrievePayoutData(
    operationId: string,
    overrides?: CallOverrides
  ): Promise<{
    walletToDebit: string;
    value: BigNumber;
    instructions: string;
    status: number;
    0: string;
    1: BigNumber;
    2: string;
    3: number;
  }>;

  revokePayoutOperator(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  staticCall: {
    authorizePayoutOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<boolean>;

    cancelPayout(operationId: string, overrides?: Overrides): Promise<boolean>;

    executePayout(operationId: string, overrides?: Overrides): Promise<boolean>;

    isPayoutOperatorFor(
      operator: string,
      from: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    orderPayout(
      operationId: string,
      value: BigNumberish,
      instructions: string,
      overrides?: Overrides
    ): Promise<boolean>;

    orderPayoutFrom(
      operationId: string,
      walletToBePaidOut: string,
      value: BigNumberish,
      instructions: string,
      overrides?: Overrides
    ): Promise<boolean>;

    processPayout(operationId: string, overrides?: Overrides): Promise<boolean>;

    putFundsInSuspenseInPayout(
      operationId: string,
      overrides?: Overrides
    ): Promise<boolean>;

    rejectPayout(
      operationId: string,
      reason: string,
      overrides?: Overrides
    ): Promise<boolean>;

    retrievePayoutData(
      operationId: string,
      overrides?: CallOverrides
    ): Promise<{
      walletToDebit: string;
      value: BigNumber;
      instructions: string;
      status: number;
      0: string;
      1: BigNumber;
      2: string;
      3: number;
    }>;

    revokePayoutOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<boolean>;
  };

  filters: {
    AuthorizedPayoutOperator(
      operator: string | null,
      account: string | null
    ): EventFilter;

    PayoutCancelled(orderer: string | null, operationId: null): EventFilter;

    PayoutExecuted(orderer: string | null, operationId: null): EventFilter;

    PayoutFundsInSuspense(
      orderer: string | null,
      operationId: null
    ): EventFilter;

    PayoutInProcess(orderer: string | null, operationId: null): EventFilter;

    PayoutOrdered(
      orderer: string | null,
      operationId: null,
      walletToDebit: string | null,
      value: null,
      instructions: null
    ): EventFilter;

    PayoutRejected(
      orderer: string | null,
      operationId: null,
      reason: null
    ): EventFilter;

    RevokedPayoutOperator(
      operator: string | null,
      account: string | null
    ): EventFilter;
  };

  estimateGas: {
    authorizePayoutOperator(operator: string): Promise<BigNumber>;
    cancelPayout(operationId: string): Promise<BigNumber>;
    executePayout(operationId: string): Promise<BigNumber>;
    isPayoutOperatorFor(operator: string, from: string): Promise<BigNumber>;
    orderPayout(
      operationId: string,
      value: BigNumberish,
      instructions: string
    ): Promise<BigNumber>;
    orderPayoutFrom(
      operationId: string,
      walletToBePaidOut: string,
      value: BigNumberish,
      instructions: string
    ): Promise<BigNumber>;
    processPayout(operationId: string): Promise<BigNumber>;
    putFundsInSuspenseInPayout(operationId: string): Promise<BigNumber>;
    rejectPayout(operationId: string, reason: string): Promise<BigNumber>;
    retrievePayoutData(operationId: string): Promise<BigNumber>;
    revokePayoutOperator(operator: string): Promise<BigNumber>;
  };

  populateTransaction: {
    authorizePayoutOperator(operator: string): Promise<PopulatedTransaction>;
    cancelPayout(operationId: string): Promise<PopulatedTransaction>;
    executePayout(operationId: string): Promise<PopulatedTransaction>;
    isPayoutOperatorFor(
      operator: string,
      from: string
    ): Promise<PopulatedTransaction>;
    orderPayout(
      operationId: string,
      value: BigNumberish,
      instructions: string
    ): Promise<PopulatedTransaction>;
    orderPayoutFrom(
      operationId: string,
      walletToBePaidOut: string,
      value: BigNumberish,
      instructions: string
    ): Promise<PopulatedTransaction>;
    processPayout(operationId: string): Promise<PopulatedTransaction>;
    putFundsInSuspenseInPayout(
      operationId: string
    ): Promise<PopulatedTransaction>;
    rejectPayout(
      operationId: string,
      reason: string
    ): Promise<PopulatedTransaction>;
    retrievePayoutData(operationId: string): Promise<PopulatedTransaction>;
    revokePayoutOperator(operator: string): Promise<PopulatedTransaction>;
  };
}
