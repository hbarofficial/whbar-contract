/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IHoldableInterface extends ethers.utils.Interface {
  functions: {
    "authorizeHoldOperator(address)": FunctionFragment;
    "balanceOnHold(address)": FunctionFragment;
    "executeHold(string,uint256)": FunctionFragment;
    "executeHoldAndKeepOpen(string,uint256)": FunctionFragment;
    "hold(string,address,address,uint256,uint256)": FunctionFragment;
    "holdFrom(string,address,address,address,uint256,uint256)": FunctionFragment;
    "isHoldOperatorFor(address,address)": FunctionFragment;
    "netBalanceOf(address)": FunctionFragment;
    "releaseHold(string)": FunctionFragment;
    "renewHold(string,uint256)": FunctionFragment;
    "retrieveHoldData(string)": FunctionFragment;
    "revokeHoldOperator(address)": FunctionFragment;
    "totalSupplyOnHold()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "authorizeHoldOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOnHold",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeHold",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeHoldAndKeepOpen",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hold",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "holdFrom",
    values: [string, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isHoldOperatorFor",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "netBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "releaseHold", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renewHold",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveHoldData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeHoldOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyOnHold",
    values?: void
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizeHoldOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOnHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeHoldAndKeepOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hold", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "holdFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isHoldOperatorFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "netBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "renewHold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "retrieveHoldData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeHoldOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyOnHold",
    data: BytesLike
  ): Result;

  events: {
    "AuthorizedHoldOperator(address,address)": EventFragment;
    "HoldCreated(address,string,address,address,address,uint256,uint256)": EventFragment;
    "HoldExecuted(address,string,address,uint256,uint256)": EventFragment;
    "HoldExecutedAndKeptOpen(address,string,address,uint256,uint256)": EventFragment;
    "HoldReleased(address,string,uint8)": EventFragment;
    "HoldRenewed(address,string,uint256,uint256)": EventFragment;
    "RevokedHoldOperator(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorizedHoldOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HoldCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HoldExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HoldExecutedAndKeptOpen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HoldReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HoldRenewed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokedHoldOperator"): EventFragment;
}

export class IHoldable extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IHoldableInterface;

  functions: {
    authorizeHoldOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOnHold(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    executeHold(
      operationId: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeHoldAndKeepOpen(
      operationId: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hold(
      operationId: string,
      to: string,
      notary: string,
      value: BigNumberish,
      timeToExpiration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    holdFrom(
      operationId: string,
      from: string,
      to: string,
      notary: string,
      value: BigNumberish,
      timeToExpiration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isHoldOperatorFor(
      operator: string,
      from: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    netBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    releaseHold(
      operationId: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renewHold(
      operationId: string,
      timeToExpiration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    retrieveHoldData(
      operationId: string,
      overrides?: CallOverrides
    ): Promise<{
      from: string;
      to: string;
      notary: string;
      value: BigNumber;
      expiration: BigNumber;
      status: number;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: number;
    }>;

    revokeHoldOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalSupplyOnHold(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  authorizeHoldOperator(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOnHold(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  executeHold(
    operationId: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeHoldAndKeepOpen(
    operationId: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hold(
    operationId: string,
    to: string,
    notary: string,
    value: BigNumberish,
    timeToExpiration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  holdFrom(
    operationId: string,
    from: string,
    to: string,
    notary: string,
    value: BigNumberish,
    timeToExpiration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isHoldOperatorFor(
    operator: string,
    from: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  netBalanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  releaseHold(
    operationId: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renewHold(
    operationId: string,
    timeToExpiration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  retrieveHoldData(
    operationId: string,
    overrides?: CallOverrides
  ): Promise<{
    from: string;
    to: string;
    notary: string;
    value: BigNumber;
    expiration: BigNumber;
    status: number;
    0: string;
    1: string;
    2: string;
    3: BigNumber;
    4: BigNumber;
    5: number;
  }>;

  revokeHoldOperator(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalSupplyOnHold(overrides?: CallOverrides): Promise<BigNumber>;

  staticCall: {
    authorizeHoldOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<boolean>;

    balanceOnHold(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeHold(
      operationId: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    executeHoldAndKeepOpen(
      operationId: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    hold(
      operationId: string,
      to: string,
      notary: string,
      value: BigNumberish,
      timeToExpiration: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    holdFrom(
      operationId: string,
      from: string,
      to: string,
      notary: string,
      value: BigNumberish,
      timeToExpiration: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    isHoldOperatorFor(
      operator: string,
      from: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    netBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    releaseHold(operationId: string, overrides?: Overrides): Promise<boolean>;

    renewHold(
      operationId: string,
      timeToExpiration: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    retrieveHoldData(
      operationId: string,
      overrides?: CallOverrides
    ): Promise<{
      from: string;
      to: string;
      notary: string;
      value: BigNumber;
      expiration: BigNumber;
      status: number;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: number;
    }>;

    revokeHoldOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<boolean>;

    totalSupplyOnHold(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    AuthorizedHoldOperator(
      operator: string | null,
      account: string | null
    ): EventFilter;

    HoldCreated(
      holdIssuer: string | null,
      operationId: null,
      from: null,
      to: null,
      notary: string | null,
      value: null,
      expiration: null
    ): EventFilter;

    HoldExecuted(
      holdIssuer: string | null,
      operationId: null,
      notary: string | null,
      heldValue: null,
      transferredValue: null
    ): EventFilter;

    HoldExecutedAndKeptOpen(
      holdIssuer: string | null,
      operationId: null,
      notary: string | null,
      heldValue: null,
      transferredValue: null
    ): EventFilter;

    HoldReleased(
      holdIssuer: string | null,
      operationId: null,
      status: null
    ): EventFilter;

    HoldRenewed(
      holdIssuer: string | null,
      operationId: null,
      oldExpiration: null,
      newExpiration: null
    ): EventFilter;

    RevokedHoldOperator(
      operator: string | null,
      account: string | null
    ): EventFilter;
  };

  estimateGas: {
    authorizeHoldOperator(operator: string): Promise<BigNumber>;
    balanceOnHold(account: string): Promise<BigNumber>;
    executeHold(operationId: string, value: BigNumberish): Promise<BigNumber>;
    executeHoldAndKeepOpen(
      operationId: string,
      value: BigNumberish
    ): Promise<BigNumber>;
    hold(
      operationId: string,
      to: string,
      notary: string,
      value: BigNumberish,
      timeToExpiration: BigNumberish
    ): Promise<BigNumber>;
    holdFrom(
      operationId: string,
      from: string,
      to: string,
      notary: string,
      value: BigNumberish,
      timeToExpiration: BigNumberish
    ): Promise<BigNumber>;
    isHoldOperatorFor(operator: string, from: string): Promise<BigNumber>;
    netBalanceOf(account: string): Promise<BigNumber>;
    releaseHold(operationId: string): Promise<BigNumber>;
    renewHold(
      operationId: string,
      timeToExpiration: BigNumberish
    ): Promise<BigNumber>;
    retrieveHoldData(operationId: string): Promise<BigNumber>;
    revokeHoldOperator(operator: string): Promise<BigNumber>;
    totalSupplyOnHold(): Promise<BigNumber>;
  };

  populateTransaction: {
    authorizeHoldOperator(operator: string): Promise<PopulatedTransaction>;
    balanceOnHold(account: string): Promise<PopulatedTransaction>;
    executeHold(
      operationId: string,
      value: BigNumberish
    ): Promise<PopulatedTransaction>;
    executeHoldAndKeepOpen(
      operationId: string,
      value: BigNumberish
    ): Promise<PopulatedTransaction>;
    hold(
      operationId: string,
      to: string,
      notary: string,
      value: BigNumberish,
      timeToExpiration: BigNumberish
    ): Promise<PopulatedTransaction>;
    holdFrom(
      operationId: string,
      from: string,
      to: string,
      notary: string,
      value: BigNumberish,
      timeToExpiration: BigNumberish
    ): Promise<PopulatedTransaction>;
    isHoldOperatorFor(
      operator: string,
      from: string
    ): Promise<PopulatedTransaction>;
    netBalanceOf(account: string): Promise<PopulatedTransaction>;
    releaseHold(operationId: string): Promise<PopulatedTransaction>;
    renewHold(
      operationId: string,
      timeToExpiration: BigNumberish
    ): Promise<PopulatedTransaction>;
    retrieveHoldData(operationId: string): Promise<PopulatedTransaction>;
    revokeHoldOperator(operator: string): Promise<PopulatedTransaction>;
    totalSupplyOnHold(): Promise<PopulatedTransaction>;
  };
}
