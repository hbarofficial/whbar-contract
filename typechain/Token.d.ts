/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TokenInterface extends ethers.utils.Interface {
  functions: {
    "accountCreator()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "authorizeHoldOperator(address)": FunctionFragment;
    "authorizePayoutOperator(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOnHold(address)": FunctionFragment;
    "cancelPayout(string)": FunctionFragment;
    "createAccount(string,string)": FunctionFragment;
    "createAccountFail(string,string)": FunctionFragment;
    "createAccountRefund(string)": FunctionFragment;
    "createAccountSuccess(string,string)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "executeHold(string,uint256)": FunctionFragment;
    "executeHoldAndKeepOpen(string,uint256)": FunctionFragment;
    "executePayout(string)": FunctionFragment;
    "getAccountCreationFee()": FunctionFragment;
    "getAccountCreator()": FunctionFragment;
    "hold(string,address,address,uint256,uint256)": FunctionFragment;
    "holdFrom(string,address,address,address,uint256,uint256)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isHoldOperatorFor(address,address)": FunctionFragment;
    "isPayoutOperatorFor(address,address)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "netBalanceOf(address)": FunctionFragment;
    "orderPayout(string,uint256,string)": FunctionFragment;
    "orderPayoutFrom(string,address,uint256,string)": FunctionFragment;
    "owner()": FunctionFragment;
    "payoutAgent()": FunctionFragment;
    "processPayout(string)": FunctionFragment;
    "putFundsInSuspenseInPayout(string)": FunctionFragment;
    "rejectPayout(string,string)": FunctionFragment;
    "releaseHold(string)": FunctionFragment;
    "renewHold(string,uint256)": FunctionFragment;
    "retrieveHoldData(string)": FunctionFragment;
    "retrievePayoutData(string)": FunctionFragment;
    "returnPayoutFromSuspenseAccount(string)": FunctionFragment;
    "revokeHoldOperator(address)": FunctionFragment;
    "revokePayoutOperator(address)": FunctionFragment;
    "setAccountCreationFee(uint256)": FunctionFragment;
    "suspenseAccount()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupplyOnHold()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferPayoutToSuspenseAccount(string)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "accountCreator", values?: void): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeHoldOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizePayoutOperator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOnHold",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPayout",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createAccount",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createAccountFail",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createAccountRefund",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createAccountSuccess",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: void): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeHold",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeHoldAndKeepOpen",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executePayout",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountCreationFee",
    values?: void
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountCreator",
    values?: void
  ): string;
  encodeFunctionData(
    functionFragment: "hold",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "holdFrom",
    values: [string, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isHoldOperatorFor",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPayoutOperatorFor",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: void): string;
  encodeFunctionData(
    functionFragment: "netBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "orderPayout",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "orderPayoutFrom",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: void): string;
  encodeFunctionData(functionFragment: "payoutAgent", values?: void): string;
  encodeFunctionData(
    functionFragment: "processPayout",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "putFundsInSuspenseInPayout",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectPayout",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "releaseHold", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renewHold",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveHoldData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "retrievePayoutData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "returnPayoutFromSuspenseAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeHoldOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePayoutOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountCreationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "suspenseAccount",
    values?: void
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: void): string;
  encodeFunctionData(functionFragment: "totalSupply", values?: void): string;
  encodeFunctionData(
    functionFragment: "totalSupplyOnHold",
    values?: void
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPayoutToSuspenseAccount",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizeHoldOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizePayoutOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOnHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAccountFail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAccountRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAccountSuccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeHoldAndKeepOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executePayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hold", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "holdFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isHoldOperatorFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPayoutOperatorFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "netBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderPayoutFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payoutAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "putFundsInSuspenseInPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "renewHold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "retrieveHoldData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrievePayoutData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnPayoutFromSuspenseAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeHoldOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePayoutOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccountCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "suspenseAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyOnHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPayoutToSuspenseAccount",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "AuthorizedHoldOperator(address,address)": EventFragment;
    "AuthorizedPayoutOperator(address,address)": EventFragment;
    "CreateAccountFail(string,address,string,uint256,string)": EventFragment;
    "CreateAccountRefund(string,address,uint256)": EventFragment;
    "CreateAccountRequest(string,address,string)": EventFragment;
    "CreateAccountSuccess(string,address,string,string)": EventFragment;
    "HoldCreated(address,string,address,address,address,uint256,uint256)": EventFragment;
    "HoldExecuted(address,string,address,uint256,uint256)": EventFragment;
    "HoldExecutedAndKeptOpen(address,string,address,uint256,uint256)": EventFragment;
    "HoldReleased(address,string,uint8)": EventFragment;
    "HoldRenewed(address,string,uint256,uint256)": EventFragment;
    "PayoutCancelled(address,string)": EventFragment;
    "PayoutExecuted(address,string)": EventFragment;
    "PayoutFundsInSuspense(address,string)": EventFragment;
    "PayoutFundsReady(string,uint256,string)": EventFragment;
    "PayoutFundsReturned(string)": EventFragment;
    "PayoutInProcess(address,string)": EventFragment;
    "PayoutOrdered(address,string,address,uint256,string)": EventFragment;
    "PayoutRejected(address,string,string)": EventFragment;
    "RevokedHoldOperator(address,address)": EventFragment;
    "RevokedPayoutOperator(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorizedHoldOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorizedPayoutOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateAccountFail"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateAccountRefund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateAccountRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateAccountSuccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HoldCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HoldExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HoldExecutedAndKeptOpen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HoldReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HoldRenewed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayoutCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayoutExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayoutFundsInSuspense"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayoutFundsReady"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayoutFundsReturned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayoutInProcess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayoutOrdered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayoutRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokedHoldOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokedPayoutOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class Token extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TokenInterface;

  functions: {
    accountCreator(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    authorizeHoldOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    authorizePayoutOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    balanceOnHold(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    cancelPayout(
      operationId: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createAccount(
      operationId: string,
      hederaPublicKey: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    createAccountFail(
      operationId: string,
      reason: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createAccountRefund(
      operationId: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createAccountSuccess(
      operationId: string,
      hederaAccountId: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decimals(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeHold(
      operationId: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeHoldAndKeepOpen(
      operationId: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executePayout(
      operationId: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAccountCreationFee(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getAccountCreator(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    hold(
      operationId: string,
      to: string,
      notary: string,
      value: BigNumberish,
      timeToExpiration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    holdFrom(
      operationId: string,
      from: string,
      to: string,
      notary: string,
      value: BigNumberish,
      timeToExpiration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isHoldOperatorFor(
      operator: string,
      from: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isPayoutOperatorFor(
      operator: string,
      from: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    netBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    orderPayout(
      operationId: string,
      value: BigNumberish,
      instructions: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    orderPayoutFrom(
      operationId: string,
      walletToBePaidOut: string,
      value: BigNumberish,
      instructions: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    payoutAgent(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    processPayout(
      operationId: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    putFundsInSuspenseInPayout(
      operationId: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rejectPayout(
      operationId: string,
      reason: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    releaseHold(
      operationId: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renewHold(
      operationId: string,
      timeToExpiration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    retrieveHoldData(
      operationId: string,
      overrides?: CallOverrides
    ): Promise<{
      from: string;
      to: string;
      notary: string;
      value: BigNumber;
      expiration: BigNumber;
      status: number;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: number;
    }>;

    retrievePayoutData(
      operationId: string,
      overrides?: CallOverrides
    ): Promise<{
      walletToDebit: string;
      value: BigNumber;
      instructions: string;
      status: number;
      0: string;
      1: BigNumber;
      2: string;
      3: number;
    }>;

    returnPayoutFromSuspenseAccount(
      operationId: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeHoldOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokePayoutOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAccountCreationFee(
      feeInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    suspenseAccount(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    symbol(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalSupplyOnHold(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferPayoutToSuspenseAccount(
      operationId: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  accountCreator(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  authorizeHoldOperator(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  authorizePayoutOperator(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOnHold(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  cancelPayout(
    operationId: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createAccount(
    operationId: string,
    hederaPublicKey: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  createAccountFail(
    operationId: string,
    reason: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createAccountRefund(
    operationId: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createAccountSuccess(
    operationId: string,
    hederaAccountId: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeHold(
    operationId: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeHoldAndKeepOpen(
    operationId: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executePayout(
    operationId: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAccountCreationFee(overrides?: CallOverrides): Promise<BigNumber>;

  getAccountCreator(overrides?: CallOverrides): Promise<string>;

  hold(
    operationId: string,
    to: string,
    notary: string,
    value: BigNumberish,
    timeToExpiration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  holdFrom(
    operationId: string,
    from: string,
    to: string,
    notary: string,
    value: BigNumberish,
    timeToExpiration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isHoldOperatorFor(
    operator: string,
    from: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPayoutOperatorFor(
    operator: string,
    from: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  netBalanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  orderPayout(
    operationId: string,
    value: BigNumberish,
    instructions: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  orderPayoutFrom(
    operationId: string,
    walletToBePaidOut: string,
    value: BigNumberish,
    instructions: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  payoutAgent(overrides?: CallOverrides): Promise<string>;

  processPayout(
    operationId: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  putFundsInSuspenseInPayout(
    operationId: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rejectPayout(
    operationId: string,
    reason: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  releaseHold(
    operationId: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renewHold(
    operationId: string,
    timeToExpiration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  retrieveHoldData(
    operationId: string,
    overrides?: CallOverrides
  ): Promise<{
    from: string;
    to: string;
    notary: string;
    value: BigNumber;
    expiration: BigNumber;
    status: number;
    0: string;
    1: string;
    2: string;
    3: BigNumber;
    4: BigNumber;
    5: number;
  }>;

  retrievePayoutData(
    operationId: string,
    overrides?: CallOverrides
  ): Promise<{
    walletToDebit: string;
    value: BigNumber;
    instructions: string;
    status: number;
    0: string;
    1: BigNumber;
    2: string;
    3: number;
  }>;

  returnPayoutFromSuspenseAccount(
    operationId: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeHoldOperator(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokePayoutOperator(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAccountCreationFee(
    feeInWei: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  suspenseAccount(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyOnHold(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferPayoutToSuspenseAccount(
    operationId: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  staticCall: {
    accountCreator(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    authorizeHoldOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<boolean>;

    authorizePayoutOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOnHold(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelPayout(operationId: string, overrides?: Overrides): Promise<boolean>;

    createAccount(
      operationId: string,
      hederaPublicKey: string,
      overrides?: PayableOverrides
    ): Promise<boolean>;

    createAccountFail(
      operationId: string,
      reason: string,
      overrides?: Overrides
    ): Promise<boolean>;

    createAccountRefund(
      operationId: string,
      overrides?: Overrides
    ): Promise<boolean>;

    createAccountSuccess(
      operationId: string,
      hederaAccountId: string,
      overrides?: Overrides
    ): Promise<boolean>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    executeHold(
      operationId: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    executeHoldAndKeepOpen(
      operationId: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    executePayout(operationId: string, overrides?: Overrides): Promise<boolean>;

    getAccountCreationFee(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountCreator(overrides?: CallOverrides): Promise<string>;

    hold(
      operationId: string,
      to: string,
      notary: string,
      value: BigNumberish,
      timeToExpiration: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    holdFrom(
      operationId: string,
      from: string,
      to: string,
      notary: string,
      value: BigNumberish,
      timeToExpiration: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    isHoldOperatorFor(
      operator: string,
      from: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPayoutOperatorFor(
      operator: string,
      from: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    netBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderPayout(
      operationId: string,
      value: BigNumberish,
      instructions: string,
      overrides?: Overrides
    ): Promise<boolean>;

    orderPayoutFrom(
      operationId: string,
      walletToBePaidOut: string,
      value: BigNumberish,
      instructions: string,
      overrides?: Overrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    payoutAgent(overrides?: CallOverrides): Promise<string>;

    processPayout(operationId: string, overrides?: Overrides): Promise<boolean>;

    putFundsInSuspenseInPayout(
      operationId: string,
      overrides?: Overrides
    ): Promise<boolean>;

    rejectPayout(
      operationId: string,
      reason: string,
      overrides?: Overrides
    ): Promise<boolean>;

    releaseHold(operationId: string, overrides?: Overrides): Promise<boolean>;

    renewHold(
      operationId: string,
      timeToExpiration: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    retrieveHoldData(
      operationId: string,
      overrides?: CallOverrides
    ): Promise<{
      from: string;
      to: string;
      notary: string;
      value: BigNumber;
      expiration: BigNumber;
      status: number;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: number;
    }>;

    retrievePayoutData(
      operationId: string,
      overrides?: CallOverrides
    ): Promise<{
      walletToDebit: string;
      value: BigNumber;
      instructions: string;
      status: number;
      0: string;
      1: BigNumber;
      2: string;
      3: number;
    }>;

    returnPayoutFromSuspenseAccount(
      operationId: string,
      overrides?: Overrides
    ): Promise<boolean>;

    revokeHoldOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<boolean>;

    revokePayoutOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<boolean>;

    setAccountCreationFee(
      feeInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    suspenseAccount(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyOnHold(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    transferPayoutToSuspenseAccount(
      operationId: string,
      overrides?: Overrides
    ): Promise<boolean>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    AuthorizedHoldOperator(
      operator: string | null,
      account: string | null
    ): EventFilter;

    AuthorizedPayoutOperator(
      operator: string | null,
      account: string | null
    ): EventFilter;

    CreateAccountFail(
      operationId: null,
      requestor: null,
      hederaPublicKey: null,
      amount: null,
      reason: null
    ): EventFilter;

    CreateAccountRefund(
      id: null,
      requestor: null,
      refundAmountWei: null
    ): EventFilter;

    CreateAccountRequest(
      operationId: null,
      requestor: null,
      hederaPublicKey: null
    ): EventFilter;

    CreateAccountSuccess(
      operationId: null,
      requestor: null,
      hederaPublicKey: null,
      hederaAccountId: null
    ): EventFilter;

    HoldCreated(
      holdIssuer: string | null,
      operationId: null,
      from: null,
      to: null,
      notary: string | null,
      value: null,
      expiration: null
    ): EventFilter;

    HoldExecuted(
      holdIssuer: string | null,
      operationId: null,
      notary: string | null,
      heldValue: null,
      transferredValue: null
    ): EventFilter;

    HoldExecutedAndKeptOpen(
      holdIssuer: string | null,
      operationId: null,
      notary: string | null,
      heldValue: null,
      transferredValue: null
    ): EventFilter;

    HoldReleased(
      holdIssuer: string | null,
      operationId: null,
      status: null
    ): EventFilter;

    HoldRenewed(
      holdIssuer: string | null,
      operationId: null,
      oldExpiration: null,
      newExpiration: null
    ): EventFilter;

    PayoutCancelled(orderer: string | null, operationId: null): EventFilter;

    PayoutExecuted(orderer: string | null, operationId: null): EventFilter;

    PayoutFundsInSuspense(
      orderer: string | null,
      operationId: null
    ): EventFilter;

    PayoutFundsReady(
      operationId: null,
      amount: null,
      instructions: null
    ): EventFilter;

    PayoutFundsReturned(operationId: null): EventFilter;

    PayoutInProcess(orderer: string | null, operationId: null): EventFilter;

    PayoutOrdered(
      orderer: string | null,
      operationId: null,
      walletToDebit: string | null,
      value: null,
      instructions: null
    ): EventFilter;

    PayoutRejected(
      orderer: string | null,
      operationId: null,
      reason: null
    ): EventFilter;

    RevokedHoldOperator(
      operator: string | null,
      account: string | null
    ): EventFilter;

    RevokedPayoutOperator(
      operator: string | null,
      account: string | null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimateGas: {
    accountCreator(): Promise<BigNumber>;
    allowance(owner: string, spender: string): Promise<BigNumber>;
    approve(spender: string, amount: BigNumberish): Promise<BigNumber>;
    authorizeHoldOperator(operator: string): Promise<BigNumber>;
    authorizePayoutOperator(operator: string): Promise<BigNumber>;
    balanceOf(account: string): Promise<BigNumber>;
    balanceOnHold(account: string): Promise<BigNumber>;
    cancelPayout(operationId: string): Promise<BigNumber>;
    createAccount(
      operationId: string,
      hederaPublicKey: string
    ): Promise<BigNumber>;
    createAccountFail(operationId: string, reason: string): Promise<BigNumber>;
    createAccountRefund(operationId: string): Promise<BigNumber>;
    createAccountSuccess(
      operationId: string,
      hederaAccountId: string
    ): Promise<BigNumber>;
    decimals(): Promise<BigNumber>;
    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish
    ): Promise<BigNumber>;
    executeHold(operationId: string, value: BigNumberish): Promise<BigNumber>;
    executeHoldAndKeepOpen(
      operationId: string,
      value: BigNumberish
    ): Promise<BigNumber>;
    executePayout(operationId: string): Promise<BigNumber>;
    getAccountCreationFee(): Promise<BigNumber>;
    getAccountCreator(): Promise<BigNumber>;
    hold(
      operationId: string,
      to: string,
      notary: string,
      value: BigNumberish,
      timeToExpiration: BigNumberish
    ): Promise<BigNumber>;
    holdFrom(
      operationId: string,
      from: string,
      to: string,
      notary: string,
      value: BigNumberish,
      timeToExpiration: BigNumberish
    ): Promise<BigNumber>;
    increaseAllowance(
      spender: string,
      addedValue: BigNumberish
    ): Promise<BigNumber>;
    isHoldOperatorFor(operator: string, from: string): Promise<BigNumber>;
    isPayoutOperatorFor(operator: string, from: string): Promise<BigNumber>;
    mint(to: string, amount: BigNumberish): Promise<BigNumber>;
    name(): Promise<BigNumber>;
    netBalanceOf(account: string): Promise<BigNumber>;
    orderPayout(
      operationId: string,
      value: BigNumberish,
      instructions: string
    ): Promise<BigNumber>;
    orderPayoutFrom(
      operationId: string,
      walletToBePaidOut: string,
      value: BigNumberish,
      instructions: string
    ): Promise<BigNumber>;
    owner(): Promise<BigNumber>;
    payoutAgent(): Promise<BigNumber>;
    processPayout(operationId: string): Promise<BigNumber>;
    putFundsInSuspenseInPayout(operationId: string): Promise<BigNumber>;
    rejectPayout(operationId: string, reason: string): Promise<BigNumber>;
    releaseHold(operationId: string): Promise<BigNumber>;
    renewHold(
      operationId: string,
      timeToExpiration: BigNumberish
    ): Promise<BigNumber>;
    retrieveHoldData(operationId: string): Promise<BigNumber>;
    retrievePayoutData(operationId: string): Promise<BigNumber>;
    returnPayoutFromSuspenseAccount(operationId: string): Promise<BigNumber>;
    revokeHoldOperator(operator: string): Promise<BigNumber>;
    revokePayoutOperator(operator: string): Promise<BigNumber>;
    setAccountCreationFee(feeInWei: BigNumberish): Promise<BigNumber>;
    suspenseAccount(): Promise<BigNumber>;
    symbol(): Promise<BigNumber>;
    totalSupply(): Promise<BigNumber>;
    totalSupplyOnHold(): Promise<BigNumber>;
    transfer(_to: string, _value: BigNumberish): Promise<BigNumber>;
    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish
    ): Promise<BigNumber>;
    transferPayoutToSuspenseAccount(operationId: string): Promise<BigNumber>;
  };

  populateTransaction: {
    accountCreator(): Promise<PopulatedTransaction>;
    allowance(owner: string, spender: string): Promise<PopulatedTransaction>;
    approve(
      spender: string,
      amount: BigNumberish
    ): Promise<PopulatedTransaction>;
    authorizeHoldOperator(operator: string): Promise<PopulatedTransaction>;
    authorizePayoutOperator(operator: string): Promise<PopulatedTransaction>;
    balanceOf(account: string): Promise<PopulatedTransaction>;
    balanceOnHold(account: string): Promise<PopulatedTransaction>;
    cancelPayout(operationId: string): Promise<PopulatedTransaction>;
    createAccount(
      operationId: string,
      hederaPublicKey: string
    ): Promise<PopulatedTransaction>;
    createAccountFail(
      operationId: string,
      reason: string
    ): Promise<PopulatedTransaction>;
    createAccountRefund(operationId: string): Promise<PopulatedTransaction>;
    createAccountSuccess(
      operationId: string,
      hederaAccountId: string
    ): Promise<PopulatedTransaction>;
    decimals(): Promise<PopulatedTransaction>;
    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish
    ): Promise<PopulatedTransaction>;
    executeHold(
      operationId: string,
      value: BigNumberish
    ): Promise<PopulatedTransaction>;
    executeHoldAndKeepOpen(
      operationId: string,
      value: BigNumberish
    ): Promise<PopulatedTransaction>;
    executePayout(operationId: string): Promise<PopulatedTransaction>;
    getAccountCreationFee(): Promise<PopulatedTransaction>;
    getAccountCreator(): Promise<PopulatedTransaction>;
    hold(
      operationId: string,
      to: string,
      notary: string,
      value: BigNumberish,
      timeToExpiration: BigNumberish
    ): Promise<PopulatedTransaction>;
    holdFrom(
      operationId: string,
      from: string,
      to: string,
      notary: string,
      value: BigNumberish,
      timeToExpiration: BigNumberish
    ): Promise<PopulatedTransaction>;
    increaseAllowance(
      spender: string,
      addedValue: BigNumberish
    ): Promise<PopulatedTransaction>;
    isHoldOperatorFor(
      operator: string,
      from: string
    ): Promise<PopulatedTransaction>;
    isPayoutOperatorFor(
      operator: string,
      from: string
    ): Promise<PopulatedTransaction>;
    mint(to: string, amount: BigNumberish): Promise<PopulatedTransaction>;
    name(): Promise<PopulatedTransaction>;
    netBalanceOf(account: string): Promise<PopulatedTransaction>;
    orderPayout(
      operationId: string,
      value: BigNumberish,
      instructions: string
    ): Promise<PopulatedTransaction>;
    orderPayoutFrom(
      operationId: string,
      walletToBePaidOut: string,
      value: BigNumberish,
      instructions: string
    ): Promise<PopulatedTransaction>;
    owner(): Promise<PopulatedTransaction>;
    payoutAgent(): Promise<PopulatedTransaction>;
    processPayout(operationId: string): Promise<PopulatedTransaction>;
    putFundsInSuspenseInPayout(
      operationId: string
    ): Promise<PopulatedTransaction>;
    rejectPayout(
      operationId: string,
      reason: string
    ): Promise<PopulatedTransaction>;
    releaseHold(operationId: string): Promise<PopulatedTransaction>;
    renewHold(
      operationId: string,
      timeToExpiration: BigNumberish
    ): Promise<PopulatedTransaction>;
    retrieveHoldData(operationId: string): Promise<PopulatedTransaction>;
    retrievePayoutData(operationId: string): Promise<PopulatedTransaction>;
    returnPayoutFromSuspenseAccount(
      operationId: string
    ): Promise<PopulatedTransaction>;
    revokeHoldOperator(operator: string): Promise<PopulatedTransaction>;
    revokePayoutOperator(operator: string): Promise<PopulatedTransaction>;
    setAccountCreationFee(
      feeInWei: BigNumberish
    ): Promise<PopulatedTransaction>;
    suspenseAccount(): Promise<PopulatedTransaction>;
    symbol(): Promise<PopulatedTransaction>;
    totalSupply(): Promise<PopulatedTransaction>;
    totalSupplyOnHold(): Promise<PopulatedTransaction>;
    transfer(_to: string, _value: BigNumberish): Promise<PopulatedTransaction>;
    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish
    ): Promise<PopulatedTransaction>;
    transferPayoutToSuspenseAccount(
      operationId: string
    ): Promise<PopulatedTransaction>;
  };
}
